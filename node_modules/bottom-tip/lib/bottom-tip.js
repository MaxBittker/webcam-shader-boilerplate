'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderTip = renderTip;

var _h = require('virtual-dom/h');

var _h2 = _interopRequireDefault(_h);

var _diff = require('virtual-dom/diff');

var _diff2 = _interopRequireDefault(_diff);

var _patch = require('virtual-dom/patch');

var _patch2 = _interopRequireDefault(_patch);

var _createElement = require('virtual-dom/create-element');

var _createElement2 = _interopRequireDefault(_createElement);

var _hsl = require('hsl');

var _hsl2 = _interopRequireDefault(_hsl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var typeColorMap = {
  ok: (0, _hsl2.default)(100, 0, 90),
  error: (0, _hsl2.default)(0, 94, 80),
  warn: (0, _hsl2.default)(60, 90, 70),
  info: (0, _hsl2.default)(240, 80, 80)
};

function panelStyle(type, content) {
  var lineCount = content.split('\n').length;
  if (type == 'inactive') {
    return {
      position: 'fixed',
      bottom: 0,
      left: 0,
      maxHeight: '0%',
      height: '0px',
      width: '100%',
      overflow: 'hidden',
      lineHeight: '20px',
      transitionDuration: '300ms',
      fontFamily: 'Source Code Pro, Menlo, monospace',
      fontSize: '12px',
      boxSizing: 'border-box',
      padding: '0 16px',
      zIndex: 999999
    };
  } else {
    return {
      position: 'fixed',
      bottom: 0,
      left: 0,
      width: '100%',
      maxHeight: '100%',
      padding: '16px',
      backgroundColor: typeColorMap[type],
      fontFamily: 'Source Code Pro, Menlo, monospace',
      whiteSpace: 'pre',
      height: 32 + 18 * lineCount + 'px',
      lineHeight: '18px',
      fontSize: '12px',
      boxSizing: 'border-box',
      transitionDuration: '300ms',
      overflow: 'auto',
      zIndex: 999999
    };
  }
}

function contentStyle(type) {
  return {};
}

var _rendered = false;
var _oldTree = null;
var _rootNode = null;

function renderTip(target, type, content) {
  // console.debug(':debug:', type, content)
  var tree = (0, _h2.default)('div', { style: panelStyle(type, content) }, [(0, _h2.default)('div', { style: contentStyle(type) }, []), (0, _h2.default)('div', {}, [content])]);
  if (_rendered) {
    var patches = (0, _diff2.default)(_oldTree, tree);
    _rootNode = (0, _patch2.default)(_rootNode, patches);
    _oldTree = tree;
  } else {
    _rootNode = (0, _createElement2.default)(tree);
    target.appendChild(_rootNode);
    _oldTree = tree;
    _rendered = true;
  }
}