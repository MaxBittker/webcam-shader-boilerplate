const mockORTC = require('../ortcmock');
const mockGetUserMedia = require('../gummock');
const shimPeerConnection = require('../../rtcpeerconnection');
const SDPUtils = require('sdp');
global.window = {setTimeout};
mockGetUserMedia(window);
mockORTC(window);
global.navigator = window.navigator;
const RTCPeerConnection = shimPeerConnection(window, 15025);

const sdp = 'v=0\r\no=root 1259705355 1259705355 IN IP4 10.0.0.33\r\ns=Asterisk PBX 11.25.3-1\r\nt=0 0\r\na=group:BUNDLE audio\r\nm=audio 11386 RTP/SAVPF 111 8 0 126\r\nc=IN IP4 10.0.0.33\r\na=rtcp:11387 IN IP4 10.0.0.33\r\na=rtpmap:111 opus/48000/2\r\na=maxptime:60\r\na=fmtp:111 maxplaybackrate=16000; stereo=0; sprop-stereo=0; useinbandfec=0\r\na=rtpmap:8 PCMA/8000\r\na=rtpmap:0 PCMU/8000\r\na=rtpmap:126 telephone-event/8000\r\na=fmtp:126 0-16\r\na=ptime:20\r\na=ice-ufrag:61afe5be4425241819ed38682d5bafc7\r\na=ice-pwd:3471252317173c061ecff4b62bfe8417\r\na=candidate:Ha000021 1 UDP 2130706431 10.0.0.33 11386 typ host\r\na=candidate:Sb96fe010 1 UDP 1694498815 185.111.224.16 55652 typ srflx raddr 10.0.0.33 rport 11386\r\na=connection:new\r\na=setup:active\r\na=fingerprint:SHA-256 63:24:17:39:79:4E:E8:13:45:B6:33:36:78:DA:40:1F:EC:06:4A:DC:CC:7F:0C:09:DC:67:65:FD:1E:34:59:12\r\na=mid:audio\r\na=rtcp-mux\r\na=sendrecv\r\n';

const pc = new RTCPeerConnection();
pc.setRemoteDescription({type: 'offer', sdp})
.then(() => {
    console.log("yay");
})
.catch((e) => {
    console.error(e);
});
